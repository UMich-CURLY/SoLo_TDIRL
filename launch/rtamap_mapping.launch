<launch>

  <!-- ROBOT MAPPING VERSION: use this with ROS bag demo_mapping.bag -->
  <!-- WARNING : Database is automatically deleted on each startup -->
  <!--           See "delete_db_on_start" option below... -->

  <!-- Choose visualization -->
  <arg name="rviz" default="false" />
  <arg name="rtabmapviz" default="false" /> 
  
  <param name="use_sim_time" type="bool" value="false"/>
  
  <!-- Localization-only mode -->
  <arg name="localization"      default="false"/>

  <arg     if="$(arg localization)" name="rtabmap_args"  default=""/>
  <arg unless="$(arg localization)" name="rtabmap_args"  default="--delete_db_on_start"/>

    <node pkg="nodelet" type="nodelet" name="rgbd_sync" args="standalone rtabmap_ros/rgbd_sync" output="screen">
      <remap from="rgb/image"        to="/head_camera/rgb/image_raw"/>
      <remap from="depth/image"      to="/head_camera/depth/image_raw"/>
      <remap from="rgb/camera_info"  to="/head_camera/rgb/camera_info"/>
      <remap from="rgbd_image"       to="rgbd_image"/> <!-- output -->
      
      <!-- Should be true for not synchronized camera topics 
           (e.g., false for kinectv2, zed, realsense, true for xtion, kinect360)-->
      <param name="approx_sync"       value="true"/> 
    </node>

    <!-- Odometry -->
    <node pkg="rtabmap_ros" type="rgbd_odometry" name="rgbd_odometry" output="screen">
      <param name="subscribe_rgbd" type="bool"   value="false"/>
      <param name="frame_id"       type="string" value="base_link"/>
      <remap from="rgbd_image" to="rgbd_image"/>
      <!-- <param name="Odom/Strategy"             type="string" value="1"/> -->
    </node>


  <group ns="rtabmap">
    <!-- SLAM (robot side) -->
    <!-- args: "delete_db_on_start" and "udebug" -->=
    <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="$(arg rtabmap_args)">
	  <param name="frame_id"           type="string" value="base_link"/>
	  <param name="wait_for_transform" type="bool" value="true"/>
	
	  <param name="subscribe_depth" type="bool" value="false"/>
	  <param name="subscribe_scan"  type="bool" value="true"/>
      <param name="subscribe_rgbd"  type="bool"   value="true"/>

	  <!-- As /az3/base_controller/odom topic doesn't provide covariances, we use TF to get odom and we fix the covariance -->
	  <param name="odom_frame_id"            type="string" value="odom"/>
	  <param name="odom_tf_linear_variance"  type="double" value="0.001"/>
	  <param name="odom_tf_angular_variance" type="double" value="0.001"/>
    <param name="approx_sync"       value="true"/> 
	  <remap from="scan" to="/base_scan"/>
    <remap from="goal" to="/move_base/simple_goal"/>
	  <remap from="rgb/image"        to="/head_camera/rgb/image_raw"/>
      <remap from="depth/image"      to="/head_camera/depth_registered/image_raw"/>
      <remap from="rgb/camera_info"  to="/head_camera/rgb/camera_info"/>
      <remap from="rgbd_image" to="/rgbd_image"/>
      <!-- output -->
  	  <remap from="grid_map" to="/map"/>
	  <!-- <param name="rgb/image_transport"   type="string" value="compressed"/>
	  <param name="depth/image_transport" type="string" value="compressedDepth"/>
	 -->
	  <!-- RTAB-Map's parameters: do "rosrun rtabmap rtabmap (double-dash)params" to see the list of available parameters. -->
	  <param name="RGBD/NeighborLinkRefining" type="string" value="true"/>  <!-- Do odometry correction with consecutive laser scans -->
	  <param name="RGBD/ProximityBySpace"     type="string" value="true"/>  <!-- Local loop closure detection (using estimated position) with locations in WM -->
	  <param name="RGBD/ProximityByTime"      type="string" value="false"/> <!-- Local loop closure detection with locations in STM -->
	  <param name="RGBD/ProximityPathMaxNeighbors" type="string" value="10"/> <!-- Do also proximity detection by space by merging close scans together. -->
	  <!-- <param name="RGBD/SavedLocalizationIgnored"  type="string" value="true"/>  -->
    <param name="Reg/Strategy"              type="string" value="2"/>     <!-- 0=Visual, 1=ICP, 2=Visual+ICP -->
	  <param name="Vis/MinInliers"            type="string" value="5"/>   <!-- 3D visual words correspondence distance -->
	  <param name="RGBD/OptimizeFromGraphEnd" type="string" value="false"/> <!-- Optimize graph from initial node so /map -> /odom transform will be generated -->
	  <param name="RGBD/OptimizeMaxError"     type="string" value="10"/>	    <!-- Reject any loop closure causing large errors (>3x link's covariance) in the map -->
	  <param name="Reg/Force3DoF"             type="string" value="true"/>  <!-- 2D SLAM -->
	  <param name="Grid/Sensor"               type="string" value="2"/>     <!-- Create 2D occupancy grid from laser scan -->
	  <param name="Mem/STMSize"               type="string" value="30"/>    <!-- increased to 30 to avoid adding too many loop closures on just seen locations -->
	  <param name="RGBD/LocalRadius"          type="string" value="5"/>     <!-- limit length of proximity detections -->
	  <param name="Icp/CorrespondenceRatio"   type="string" value="0.04"/>   <!-- minimum scan overlap to accept loop closure -->
	  <param name="Icp/PM"                    type="string" value="false"/>
	  <param name="Icp/PointToPlane"          type="string" value="false"/>
	  <param name="Icp/MaxCorrespondenceDistance"  type="string" value="0.15"/>
	  <param name="Icp/VoxelSize"             type="string" value="0.05"/>
    <param name="Grid/MaxObstacleHeight"    type="string" value="2"/>
    <param name="Grid/3D"                   type="string" value="true"/>
    <param name="Grid/RayTracing"           type="string" value="true"/>
    <param name="use_action_for_goal"       type="string" value="true"/>
	  
	  <!-- localization mode -->
	  <param     if="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="false"/>
	  <param unless="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="true"/>
    <!-- <param     if="$(arg localization)" name="~database_path" type="string" value="/mnt/Sauna/rtabmap.db"/> -->
    
	  <param name="Mem/InitWMWithAllNodes" type="string" value="$(arg localization)"/>
    </node>
 </group>
</launch>